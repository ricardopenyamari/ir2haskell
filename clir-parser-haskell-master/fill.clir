
(verification-unit "SIMPLE"
		   :sources "(((:lang :handmade-clir) (:module :self)))"
		   :uses "(:ir)"
		   :documentation "This is a simple testfile for validating the CLIR rewriting rules.")



(define fill ((xs (array 'a)) (elem 'a)) ((res (array 'a)))
    (declare
        (assertion
            (precd true)
            (postcd (forall ((i int)) (-> (@ <= (the int 0) i) 
                                       (-> (@ < i (@ len res)) (@ = (@ get-array res i) elem)))))))
    (letfun (
        (filln ((n int) (elem 'a) (xs (array 'a))) ((res (array 'a)))
            (let ((l int)) (@ len xs)
               (let ((x int)) (@ >= n l)
                (case x (
                    ((@@ true) xs)
                    ((@@ false) (let ((xsp (array 'a))) (@ set-array xs n elem)
                                (let ((n1 int)) (@ + n (the int 1)) (@ filln n1 elem xsp))))))))))
        (@ filln (the int 0) elem xs)
    )
)


;; Local Variables:
;; mode: common-lisp
;; coding: utf-8
;; End:
